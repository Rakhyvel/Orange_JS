static Canvas {
    struct Canvas(int width, int height, Canvas next)
    struct Context()
    struct Rect(int x, int y, int w, int h)
    struct Point(int x, int y)
    struct Color(int a, int r, int g, int b)
    struct MouseEvent(int offsetX, int offsetY)

    Canvas canvas;
    Context ctx;

    void init(char[] id){
        canvas = cast(Canvas)verbatim("document.getElementById(", id, ")");
        ctx = cast(Context)verbatim(canvas, ".getContext('2d')");
    }
    void destroy(){}
    void setColor(int a, int r, int g, int b){
        verbatim(   ctx, ".fillStyle='rgba('+", r, "+','+", g, "+','+", b, "+','+", a, "+')'");
        verbatim(   ctx, ".strokeStyle='rgba('+", r, "+','+", g, "+','+", b, "+','+", a, "+')'");
    }
    void setStroke(int w){
        verbatim(   ctx, ".lineWidth=", w);
    }
    void setFont(char[] font){
        verbatim(   ctx, ".font=", font);
    }
    void drawLine(int x1, int y1, int x2, int y2){
        verbatim(   ctx, ".beginPath();", 
                    ctx, ".moveTo(", x1, ",", y1, ");", 
                    ctx, ".lineTo(", x2, ",", y2, ");", 
                    ctx, ".stroke()");
    }
    void drawRect(int x, int y, int w, int h){
        verbatim(   ctx, ".beginPath();", 
                    ctx, ".rect(", x, ",", y, ",", w, ",", h, ");",
                    ctx, ".stroke()");
    }
    void fillRect(int x, int y, int w, int h){
        verbatim(   ctx, ".fillRect(", x, ",", y, ",", w, ",", h, ")");
    }
    void drawImage(Image:Image image, int x, int y){
        verbatim(   ctx, ".drawImage(", image, ",", x, ",", y, ")");
    }
    void drawString(char[] text, int x, int y){
        verbatim(   ctx, ".fillText(", text, ",", x, ",", y, ")");
    }
    void drawPolygon(int[] xPoints, int[] yPoints){

    }
    void fillPolygon(int[] xPoints, int[] yPoints){

    }
    int addMouseListener(char[] event, void callback(MouseEvent e)){
        verbatim(   ctx, ".addEventListener(", event, ",", callback, ")");
    }
    int width(){
        return canvas.width;
    }
    int height(){
        return canvas.height;
    }
    void requestAnimationFrame(void callback(real timestep)) {
        verbatim(   "window.requestAnimationFrame(", callback, ")");
    }
}

static Image {
    struct Image(char[] src)

    Image create(char[] src) {
        Image retval = cast(Image)verbatim("new Image()");
        verbatim(retval, ".onload=function(){}");
        retval.src = src;
        return retval;
    }
}